openapi: '3.0.1'
info:
  title: Clash Bot Service
  description: |
    # Welcome to Clash Bot! 
    
    Where all of your League of Legends Clash scheduling needs are met!
    
    ## Purpose
    
    Clash Bot Webapp Service to support League of Legends Clash tournament scheduling with Discord.
    
    ## Disclaimer
    
    Clash-Bot is not endorsed by Riot Games and does not reflect the views or opinions of Riot Games or 
    anyone officially involved in producing or managing League of Legends. League of Legends and Riot Games 
    are trademarks or registered trademarks of Riot Games, Inc. League of Legends Â© Riot Games, Inc.
  contact:
    name: ClashBot-API-Support
    email: rixxroid@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
  - url: http://localhost:{port}/{basePath}
    description: The local API server.
    variables:
      port:
        default: '8080'
      basePath:
        default: api/v2
tags:
  - name: Champions
    description: Dealing with User's League of Legends champions choices.
  - name: Server
    description: A Discord server that is leveraging the Clash Bot.
  - name: Subscription
    description: Subscriptions to certain notifications that Clash Bot produces.
  - name: Team
    description: A Clash Bot team for a League of Legends Clash tournament.
  - name: Tentative
    description: A tentative queue for upcoming League of Legends Clash tournaments.
  - name: Tournament
    description: A League of Legends Clash Tournament.
  - name: Maintenance
    description: Endpoints related to maintenance of the Service.
  - name: User
    description: A Discord user that is leveraging the Clash Bot.
components:
  schemas:
    Server:
      description: A Discord Server
      type: object
      properties:
        id:
          description: The unique identifier for a Discord Server.
          type: string
        name:
          description: The Discord Server name associated to the id.
          type: string
    Event:
      description: A websocket event to be published.
      type: object
      required:
        - id
        - teamEvent
        - serverId
        - causedBy
      properties:
        id:
          description: The unique identifier for the event.
          type: string
        teamEvent:
          $ref: '#/components/schemas/TeamEvent'
        summary:
          description: A message to describe the event.
          type: string
        serverId:
          description: The Discord server id attached to the event.
          type: string
        causedBy:
          description: Who the event was caused by.
          type: string
    TeamEvent:
      type: object
      required:
        - eventType
      properties:
        team:
          $ref: '#/components/schemas/Team'
        tentative:
          $ref: '#/components/schemas/Tentative'
        eventType:
          $ref: '#/components/schemas/EventType'
    EventType:
      description: The type of event.
      type: string
      enum:
        - CREATED
        - JOINED
        - REMOVED
        - UPDATED
        - DELETED
    Servers:
      description: A list of the Player's selected Server
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
    Team:
      description: A League of Legends Clash Team
      type: object
      properties:
        id:
          description: Unique identifier for a Team.
          type: string
        name:
          description: The name of the Team.
          type: string
        playerDetails:
          description: The available positions a Player can be assigned to for a Team.
          type: object
          properties:
            Top:
              $ref: '#/components/schemas/TeamPlayer'
            Mid:
              $ref: '#/components/schemas/TeamPlayer'
            Jg:
              $ref: '#/components/schemas/TeamPlayer'
            Bot:
              $ref: '#/components/schemas/TeamPlayer'
            Supp:
              $ref: '#/components/schemas/TeamPlayer'
        serverId:
          description: The Discord server id that the Team belongs to.
          type: string
        tournament:
          $ref: '#/components/schemas/BaseTournament'
        lastUpdatedAt:
          description: The timestamp that the object was updated at
          type: string
          format: date-time
    TeamRequired:
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          required:
            - serverId
            - tournament
            - playerDetails
    TeamUpdate:
      description: Allowed properties to be updated on a Clash Team
      required:
        - teamName
      properties:
        teamName:
          type: string
          description: The name of the team
    Teams:
      description: A list of League of Legend's Clash Teams
      properties:
        count:
          type: integer
        teams:
          type: array
          items:
            $ref: '#/components/schemas/Team'
    BaseTournament:
      description: The base necessary Tournament details
      type: object
      properties:
        tournamentName:
          description: The name of the Tournament.
          type: string
        tournamentDay:
          description: The day number of the Tournament. [1-4]
          example: 1
          type: string
    DetailedTournament:
      description: A League of Legends Clash Tournament
      type: object
      properties:
        tournamentName:
          description: The name of the Tournament.
          type: string
        tournamentDay:
          description: The day number of the Tournament. [1-4]
          example: 1
          type: string
        startTime:
          description: When the Tournament starts.
          type: string
          format: date-time
        registrationTime:
          description: When you can register for the Tournament.
          type: string
          format: date-time
    Tournaments:
      description: A list of Tournaments
      type: object
      properties:
        count:
          type: integer
        tournaments:
          type: array
          items:
            $ref: '#/components/schemas/DetailedTournament'
    Tentative:
      description: A queue for Players unsure if they will play Clash for a given Tournament.
      type: object
      properties:
        id:
          description: Unique identifier for the Tentative Queue.
          type: string
        serverId:
          description: The default Discord Server id for the player to use.
          type: string
        tournamentDetails:
          $ref: '#/components/schemas/BaseTournament'
        tentativePlayers:
          items:
            $ref: '#/components/schemas/TentativePlayer'
        lastUpdatedAt:
          description: The timestamp that the object was updated at
          type: string
          format: date-time
    TentativeRequired:
      allOf:
        - $ref: '#/components/schemas/Tentative'
        - type: object
          required:
            - serverId
            - tournamentDetails
            - tentativePlayers
    Tentatives:
      description: A list of queues for Players unsure if they will play Clash for a given Tournament.
      type: object
      properties:
        count:
          type: integer
        queues:
          type: array
          items:
            $ref: '#/components/schemas/Tentative'
    Player:
      description: A Clash Bot Player
      type: object
      properties:
        discordId:
          description: Discord Id for the Player
          type: string
        name:
          description: The Players discord name
          type: string
        role:
          $ref: '#/components/schemas/Role'
        champions:
          description: A list of the Users preferred champions.
          type: array
          items:
            $ref: '#/components/schemas/Champion'
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
        serverId:
          description: The Discord Server id that the User is defaulted to.
          type: string
        selectedServers:
          description: The list of available Discord Servers for the player to filter by.
          type: array
          items:
            type: string
    TeamPlayer:
      description: A Player record with a subset of Player information for usage with Teams.
      type: object
      properties:
        discordId:
          description: Discord Id for the Player
          type: string
        name:
          description: The Players discord name
          type: string
        champions:
          description: A list of the Users preferred champions.
          type: array
          items:
            $ref: '#/components/schemas/Champion'
    TentativePlayer:
      description: A Player record with a subset of Player information for usage with Tentative queues.
      type: object
      properties:
        discordId:
          description: Discord Id for the Player
          type: string
        name:
          description: The Players discord name
          type: string
        champions:
          description: A list of the Users preferred champions.
          type: array
          items:
            $ref: '#/components/schemas/Champion'
        role:
          $ref: '#/components/schemas/Role'
    Subscription:
      description: A map of subscriptions a player has for Clash Bot
      type: object
      properties:
        key:
          $ref: '#/components/schemas/SubscriptionType'
        isOn:
          type: boolean
    Champion:
      description: A record listing details on a League of Legends champion
      type: object
      properties:
        name:
          type: string
    Champions:
      description: A list of League of Legends champions and their details
      properties:
        champions:
          type: array
          items:
            $ref: '#/components/schemas/Champion'
    Role:
      description: A League of Legends role.
      type: string
      enum:
        - TOP
        - MID
        - JG
        - BOT
        - SUPP
    SubscriptionType:
      description: The type of User subscription.
      type: string
      enum:
        - DISCORD_MONDAY_NOTIFICATION
    Error:
      description: The base error object.
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    PositionDetails:
      description: Details necessary to update a User's position on a Team with.
      type: object
      properties:
        champions:
          $ref: "#/components/schemas/Champions"
        role:
          $ref: "#/components/schemas/Role"
    TeamTournamentDetails:
      description: Details necessary to update a User's position on a Team based on fluid details.
      type: object
      properties:
        discordId:
          description: The user's Discord Id.
          type: string
        tournamentName:
          description: The Clash Tournament's name.
        tournamentDay:
          description: The Clash Tournament's day.
        role:
          $ref: "#/components/schemas/Role"
    ArchiveMetadata:
      description: Metadata regarding the archive process.
      type: object
      properties:
        teamsMoved:
          description: The number of Teams moved into the archive table.
          type: integer
        tentativeQueuesMoved:
          description: The number of Tentative Queues moved into the archive table.
          type: integer
        totalTime:
          description: The total time the process took in milliseconds
          type: string
  parameters:
    AuditHeaderParam:
      name: x-caused-by
      in: header
      schema:
        type: string
        default: Not Found
      required: true
    InactiveQueryParam:
      name: archived
      in: query
      description: Will retrieve records that are from past Tournaments
      schema:
        type: boolean
        default: false
    DiscordIdPathParam:
      name: discordId
      in: path
      description: The Discord id of the Player
      required: true
      schema:
        type: string
    DiscordIdQueryParam:
      name: discordId
      in: query
      description: The Discord id of the Player
      schema:
        type: string
    ServerIdPathParam:
      name: serverId
      in: path
      description: The Discord id of the Discord Server
      required: true
      schema:
        type: string
    ServerIdQueryParam:
      name: serverId
      in: query
      description: The Discord id of the Discord Server
      schema:
        type: string
    SubscriptionPathParam:
      name: subscription
      description: The subscription type.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/SubscriptionType'
    TeamIdPathParam:
      name: teamId
      in: path
      description: The unique identifier of the Clash Bot Team
      required: true
      schema:
        type: string
    TentativeQueueIdPathParam:
      name: tentativeId
      in: path
      description: The unique identifier of the Clash Bot Tentative queue
      required: true
      schema:
        type: string
    TournamentNamePathParam:
      name: tournamentName
      in: path
      description: The LoL Clash Tournament name
      required: true
      schema:
        type: string
    TournamentNameQueryParam:
      name: tournamentName
      in: query
      description: The LoL Clash Tournament name
      schema:
        type: string
    TournamentDayPathParam:
      name: tournamentDay
      in: path
      description: The LoL Clash Tournament day
      required: true
      schema:
        type: string
    TournamentDayQueryParam:
      name: tournamentDay
      in: query
      description: The LoL Clash Tournament day
      schema:
        type: string
  requestBodies:
    PostTeamRequestBody:
      description: Details to create a Clash Bot Team with.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamRequired'
          examples:
            baseCreateTeam:
              $ref: '#/components/examples/TeamCreateExample'
    PatchTeamRequestBody:
      description: Details to update a Clash Bot Team's metadata with.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamUpdate'
          examples:
            baseCreateTeam:
              $ref: '#/components/examples/TeamMetadataExample'
    PatchAssignUserToTeamRequestBody:
      description: Details to assign a user to a Team with.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PositionDetails'
          examples:
            assignTop:
              $ref: '#/components/examples/AssignUserToTeamAsTopExample'
            assignJg:
              $ref: '#/components/examples/AssignUserToTeamAsJgExample'
            assignMid:
              $ref: '#/components/examples/AssignUserToTeamAsMidExample'
            assignBot:
              $ref: '#/components/examples/AssignUserToTeamAsBotExample'
            assignSupp:
              $ref: '#/components/examples/AssignUserToTeamAsSuppExample'
    PostTentativeQueueRequestBody:
      description: Details to create a Clash Bot Tentative Queue with.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TentativeRequired'
          examples:
            baseCreateTeam:
              $ref: '#/components/examples/TentativeQueueCreateExample'
    CreatePlayerBody:
      description: All necessary parameters to create a new Player
      content:
        application/json:
          schema:
            type: object
            required:
              - discordId
              - name
              - serverId
            properties:
              discordId:
                description: The Discord id of the player
                type: string
              name:
                description: The Clash Bot User's name
                type: string
              serverId:
                description: The Discord Server that the player is using by default.
                type: string
              selectedGuilds:
                description: The list of available Discord Servers for the player to filter by.
                type: array
                items:
                  type: string
    UpdatePlayerBody:
      description: All necessary parameters to update an existing Player
      content:
        application/json:
          schema:
            type: object
            required:
              - serverId
            properties:
              serverId:
                description: The Discord Server that the player is using by default.
                type: string
    ChampionRequestBody:
      description: A list of champions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Champions'
    ServerRequestBody:
      description: A list of Discord Servers.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Servers'

  responses:
    ArchiveResponse:
      description: The metadata regarding the archive process.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ArchiveMetadata"
    TentativeResponse:
      description: A Tentative queue.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tentative"
    TentativeListResponse:
      description: The retrieved list of Tentative queues for a Discord Server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tentatives"
    TeamResponse:
      description: A Clash Bot Team.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
          examples:
            success:
              $ref: '#/components/examples/TeamExample'
    TeamListResponse:
      description: The retrieved list of Teams for a Discord Server.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Teams"
    TeamInteractionResponse:
      description: The updated team details.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Team"
    ChampionListResponse:
      description: List of champions for a Player
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Champions"
    SelectedServersResponse:
      description: List of selected Servers for a Player
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Servers"
    NotFound:
      description: Unable to find requested resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NoneFound:
      description: No results found matching the criteria.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadInput:
      description: Input given is invalid.
    ClashBotException:
      description: Default error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  examples:
    TeamCreateExample:
      description: |
        The minimum required payload to create a Team with. If you do not provide a name, it will be created for you.
      summary: A base Team post body.
      value:
        {
          "playerDetails": {
            "Top": {
              "discordId": "1",
            }
          },
          "serverId": 123,
          "tournament": {
            "tournamentName": "awesome_sauce",
            "tournamentDay": "1"
          }
        }
    AssignUserToTeamAsTopExample:
      description: |
        The details to assign a Player to a Clash Bot Team as Top.
      summary: Assign Player to a Team as Top.
      value:
        {
          "role": "TOP"
        }
    AssignUserToTeamAsJgExample:
      description: |
        The details to assign a Player to a Clash Bot Team as Jungle.
      summary: Assign Player to a Team as Jungle.
      value:
        {
          "role": "JG"
        }
    AssignUserToTeamAsMidExample:
      description: |
        The details to assign a Player to a Clash Bot Team as Mid.
      summary: Assign Player to a Team as Mid.
      value:
        {
          "role": "MID"
        }
    AssignUserToTeamAsBotExample:
      description: |
        The details to assign a Player to a Clash Bot Team as Bot.
      summary: Assign Player to a Team as Bot.
      value:
        {
          "role": "BOT"
        }
    AssignUserToTeamAsSuppExample:
      description: |
        The details to assign a Player to a Clash Bot Team as Support.
      summary: Assign Player to a Team as Support.
      value:
        {
          "role": "SUPP"
        }
    TeamMetadataExample:
      description: |
        An example of a payload to update the Clash Bot Team's metadata.
      summary: A base Team patch body.
      value:
        {
          "teamName": "Some new name",
        }
    TentativeQueueCreateExample:
      description: |
        The minimum required payload to create a Tentative Queue with.
      summary: A base Tentative queue post body.
      value:
        {
          "serverId": 1234,
          "tournamentDetails": {
            "tournamentName": "awesome_sauce",
            "tournamentDay": "1"
          },
          "tentativePlayers": [
            {
              "discordId": "1",
              "role": "Top"
            }
          ]
        }
    TeamExample:
      description: |
        A Team object.
      summary: A Team
      value:
        {
          "id": "123abcde",
          "name": "A simple team",
          "playerDetails": {
            "Top": {
              "discordId": "1234",
              "name": "Player 1",
              "champions": [
                {
                  "name": "Aatrox"
                }
              ]
            },
            "Mid": {
              "discordId": "1235",
              "name": "Player 2",
              "champions": [
                {
                  "name": "Anivia"
                }
              ]
            }
          },
          "serverId": 12345,
          "tournament": {
            "tournamentName": "awesome_sauce",
            "tournamentDay": "1"
          }
        }
    TentativeExample:
      description: |
        A Tentative queue object.
      summary: A Tentative queue
      value:
        {
          "id": "1234asdf",
          "serverId": 1234,
          "tournamentDetails": {
            "tournamentName": "awesome_sauce",
            "tournamentDay": "1"
          },
          "tentativePlayers": [
            {
              "discordId": "1",
              "name": "Player One",
              "champions": [
                {
                  "name": "Azir"
                }
              ],
              "role": "Mid"
            }
          ]
        }
paths:
  /teams:
    summary: Used to interact with Teams that are active
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
    get:
      description: Returns a list of Teams.
      tags:
        - Team
      parameters:
        - $ref: '#/components/parameters/InactiveQueryParam'
        - $ref: '#/components/parameters/DiscordIdQueryParam'
        - $ref: '#/components/parameters/ServerIdQueryParam'
        - $ref: '#/components/parameters/TournamentNameQueryParam'
        - $ref: '#/components/parameters/TournamentDayQueryParam'
      operationId: retrieveTeams
      responses:
        200:
          $ref: '#/components/responses/TeamListResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
    post:
      description: Creates a Team with the defined details
      tags:
        - Team
      operationId: createTeam
      requestBody:
        $ref: '#/components/requestBodies/PostTeamRequestBody'
      responses:
        200:
          $ref: '#/components/responses/TeamResponse'
        400:
          $ref: '#/components/responses/BadInput'
        500:
          $ref: '#/components/responses/ClashBotException'
  /teams/{teamId}:
    summary: To interact with a created Team.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/TeamIdPathParam'
    get:
      description: Returns a single Clash Bot Team based on the id provided.
      operationId: retrieveTeamBasedOnId
      tags:
        - Team
      responses:
        200:
          $ref: '#/components/responses/TeamResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
    patch:
      description: Updates an existing Clash Bot Team's metadata.
      operationId: updateTeam
      tags:
        - Team
      requestBody:
        $ref: '#/components/requestBodies/PatchTeamRequestBody'
      responses:
        200:
          $ref: '#/components/responses/TeamResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
  /teams/{teamId}/users/{discordId}:
    summary: To interact with a Team on the behalf of a Player.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/TeamIdPathParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
    patch:
      description: Assign's a User to the specified Team based on the role provided.
      operationId: assignUserToTeam
      tags:
        - Team
      requestBody:
        $ref: '#/components/requestBodies/PatchAssignUserToTeamRequestBody'
      responses:
        200:
          $ref: '#/components/responses/TeamInteractionResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
    delete:
      description: Removes a User from the specified Team.
      operationId: removeUserFromTeam
      tags:
        - Team
      responses:
        200:
          $ref: '#/components/responses/TeamInteractionResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
  /tentatives:
    summary: Interacts with Tentative queues.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
    get:
      description: Retrieves a list of Tentative queues.
      operationId: retrieveTentativeQueues
      parameters:
        - $ref: '#/components/parameters/InactiveQueryParam'
        - $ref: '#/components/parameters/DiscordIdQueryParam'
        - $ref: '#/components/parameters/ServerIdQueryParam'
        - $ref: '#/components/parameters/TournamentNameQueryParam'
        - $ref: '#/components/parameters/TournamentDayQueryParam'
      tags:
        - Tentative
      responses:
        200:
          $ref: '#/components/responses/TentativeListResponse'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/schemas/Error'
    post:
      description: Creates a Tentative queue.
      operationId: createTentativeQueue
      requestBody:
        $ref: '#/components/requestBodies/PostTentativeQueueRequestBody'
      tags:
        - Tentative
      responses:
        200:
          $ref: '#/components/responses/TentativeResponse'
        204:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/schemas/Error'
  /tentatives/{tentativeId}:
    summary: Interacts with a Tentative queue.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/TentativeQueueIdPathParam'
    get:
      description: Retrieves a Tentative queues.
      operationId: retrieveTentativeQueue
      tags:
        - Tentative
      responses:
        200:
          $ref: '#/components/responses/TentativeResponse'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/schemas/Error'
  /tentatives/{tentativeId}/users/{discordId}:
    summary: Interacts with a specific Tentative queue.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/TentativeQueueIdPathParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
    patch:
      description: Updates an existing Tentative queue.
      operationId: assignUserToATentativeQueue
      tags:
        - Tentative
      responses:
        200:
          $ref: '#/components/responses/TentativeResponse'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/schemas/Error'
    delete:
      description: Removes a User from the specified Tentative Queue.
      operationId: removeUserFromTentativeQueue
      tags:
        - Tentative
      responses:
        200:
          $ref: '#/components/responses/TentativeResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NoneFound'
        500:
          $ref: '#/components/responses/ClashBotException'
  /tournaments:
    summary: APIs to interact with Clash Tournaments.
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
    get:
      operationId: getTournaments
      parameters:
        - name: tournament
          description: The Tournament name to filter by.
          in: query
          style: form
          required: false
          schema:
            type: string
        - name: day
          description: The tournament day to filter by.
          in: query
          style: form
          required: false
          schema:
            type: string
        - name: upcomingOnly
          description: Whether to return only upcoming tournaments or not?
          in: query
          style: form
          required: false
          schema:
            type: boolean
      tags:
        - Tournament
      responses:
        200:
          description: return a tournament or Tournaments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournaments'
        400:
          description: If no Tournaments can be found with a name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: To create a Tournament
      operationId: createTournament
      tags:
        - Tournament
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailedTournament'
      responses:
        200:
          description: Create Tournament record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedTournament'
  /tournaments/riot:
    summary: Used to interact with Riot's Clash Tournaments api for League of Legends
    patch:
      description: Will retrieve Clash Tournaments from Riot's League of Legends API
      operationId: retrieveRiotClashTournaments
      tags:
        - Tournament
      responses:
        200:
          description: Successfully retrieved and persisted Clash Tournaments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournaments'
  /users:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
    get:
      description: Retrieve a Clash Bot Player Details
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/DiscordIdQueryParam'
      tags:
        - User
      responses:
        200:
          description: The Clash Bot Player details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
    post:
      description: Create a new Clash Bot Player.
      operationId: createUser
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/CreatePlayerBody'
      responses:
        200:
          description: Created a new Clash Bot Player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
  /users/{discordId}:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
    patch:
      description: Update an existing Clash Bot Player.
      operationId: updateUser
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/UpdatePlayerBody'
      responses:
        200:
          description: Updated an existing Player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
  /users/{discordId}/subscriptions/{subscription}:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
      - $ref: '#/components/parameters/SubscriptionPathParam'
    get:
      description: Retrieve details on a user's subscription.
      operationId: isUserSubscribed
      tags:
        - Subscription
      responses:
        200:
          description: The User's subscription details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
    post:
      description: Subscribes the User to the specified subscription.
      operationId: subscribeUser
      tags:
        - Subscription
      responses:
        200:
          description: The User's subscription details after a successful subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
    delete:
      description: Unsubscribes the User from the specified subscription.
      operationId: unsubscribeUser
      tags:
        - Subscription
      responses:
        200:
          description: The User's subscription details after they have successfully unsubscribed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ClashBotException'
        default:
          $ref: "#/components/responses/ClashBotException"
  /users/{discordId}/champions:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
    get:
      description: Returns a list of preferred champions that the User has.
      operationId: retrieveUsersPreferredChampions
      tags:
        - Champions
      responses:
        200:
          $ref: '#/components/responses/ChampionListResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    post:
      description: Updates the users preferred champions with an entirely new list. Cannot be greater than a length of 5.
      operationId: createListOfPreferredChampionsForUser
      tags:
        - Champions
      requestBody:
        $ref: '#/components/requestBodies/ChampionRequestBody'
      responses:
        200:
          $ref: '#/components/responses/ChampionListResponse'
        204:
          $ref: '#/components/responses/NoneFound'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    patch:
      description: Adds the requested champion to the users preferred champions. Cannot be greater than a length of 5.
      operationId: addToPreferredChampionsForUser
      tags:
        - Champions
      requestBody:
        $ref: '#/components/requestBodies/ChampionRequestBody'
      responses:
        200:
          $ref: '#/components/responses/ChampionListResponse'
        204:
          $ref: '#/components/responses/NoneFound'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    delete:
      description: Removes the requested champion to the users preferred champions.
      operationId: removePreferredChampionForUser
      tags:
        - Champions
      parameters:
        - name: champions
          description: The list of champion's names to remove from the user's list of champions
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/responses/ChampionListResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
  /users/{discordId}/servers:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
      - $ref: '#/components/parameters/DiscordIdPathParam'
    get:
      description: Returns a list of selected servers that the User has.
      operationId: retrieveUsersSelectedServers
      tags:
        - User
      responses:
        200:
          $ref: '#/components/responses/SelectedServersResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    post:
      description: Updates the users selected servers with an entirely new list. Cannot be greater than a length of 5.
      operationId: createUsersSelectedServers
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/ServerRequestBody'
      responses:
        200:
          $ref: '#/components/responses/SelectedServersResponse'
        204:
          $ref: '#/components/responses/NoneFound'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    patch:
      description: Adds the selected server to the users selected servers. Cannot be greater than a length of 5.
      operationId: addUsersSelectedServers
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/ServerRequestBody'
      responses:
        200:
          $ref: '#/components/responses/SelectedServersResponse'
        204:
          $ref: '#/components/responses/NoneFound'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
    delete:
      description: Removes the selected server to the users selected servers.
      operationId: removeUsersSelectedServers
      tags:
        - User
      parameters:
        - name: champions
          description: The list of selected servers to remove from the user's list of champions
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/responses/SelectedServersResponse'
        400:
          $ref: '#/components/responses/BadInput'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/schemas/Error'
  /archive:
    parameters:
      - $ref: '#/components/parameters/AuditHeaderParam'
    post:
      operationId: archiveTeamsAndTentativeQueues
      description: |
        Will move all Teams and Tentative Queues that are now inactive into an archive table. 
        This will help keep current operations clean and quick.
      tags:
        - Maintenance
      responses:
        200:
          $ref: '#/components/responses/ArchiveResponse'
        5XX:
          $ref: '#/components/schemas/Error'

